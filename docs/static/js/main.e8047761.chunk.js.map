{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","addNew","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","width","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGift","GifExpertApp","categories","setCategories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMA8BeA,EA3BK,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SARS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAO,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OAC7BN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,SAfe,SAACN,GACxBF,EAAcE,EAAEO,OAAOC,QAefA,MAAOX,O,+BCnBVY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGIA,EAAIC,OAHR,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCSLO,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKc,UAAU,4CAAf,UACI,qBAAKC,MAAM,SAASC,IAAKhB,EAAKiB,IAAKP,IACnC,4BAAIA,QCoBDQ,EAtBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACf,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAK,SAAAC,GAAI,OAAEH,EAAS,CAClChB,KAAMmB,EACNL,SAAQ,SAEd,CAACrB,IACIsB,EDTwBK,CAAa3B,GAA/B0B,EAAb,EAAOnB,KAAYc,EAAnB,EAAmBA,QAEnB,OACG,qCACC,6BAAKrB,IAEDqB,GAAY,4CAEhB,sBAAKL,UAAU,YAAf,UACI,uBAEIU,EAAKjB,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,cEI3BiB,EAlBM,WACjB,MAAoC1C,mBAAS,CAAC,mBAA9C,mBAAO2C,EAAP,KAAmBC,EAAnB,KACA,OACI,qCACG,8CACA,cAAC,EAAD,CAAa7C,OAAQ6C,IACrB,uBAEA,6BAEID,EAAWpB,KAAI,SAAAsB,GAAG,OAAG,cAAC,EAAD,CAAoB/B,SAAU+B,GAAfA,Y,MCRnDC,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.e8047761.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({addNew}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handlerInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >2){\r\n            addNew(cats=>[inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={handlerInputChange}\r\n                value={inputValue}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    addNew: PropTypes.func.isRequired\r\n}\r\nexport default AddCategory\r\n\r\n\r\n\r\n\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=kLyxDa5LOZI4cFev32UR8XJwE8DbwOpz`;\r\n    const res = await fetch(url)\r\n    const { data } = await res.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"carta animate__animated animate__bounceIn\">\r\n            <img width=\"250px;\" src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React  from 'react'\r\nimport { useFetchGift } from '../hooks/useFetchGift';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const {data: imgs, loading} =  useFetchGift(category)\r\n\r\n    return (\r\n       <>\r\n        <h3>{category}</h3>\r\n        {\r\n            loading  && <p>Cargando...</p>\r\n        }\r\n        <div className=\"card-grid\">\r\n            <br/>\r\n            {\r\n                imgs.map(img => (\r\n                    <GifGridItem key={img.id} {...img}/>\r\n                    ))\r\n            }\r\n        </div>\r\n       </> \r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGift = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs=>setstate({\r\n            data: imgs,\r\n            loading:false\r\n        }));\r\n    },[category]);\r\n    return state;\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Rick and Morti'])\r\n    return (\r\n        <>\r\n           <h2>GifExpertApp</h2> \r\n           <AddCategory addNew={setCategories}/>\r\n           <hr/>\r\n           \r\n           <ol>\r\n           {\r\n               categories.map(cat=>(<GifGrid  key={cat} category={cat}/>))\r\n           }\r\n               \r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\n//const key = 'kLyxDa5LOZI4cFev32UR8XJwE8DbwOpz';\nReactDOM.render(\n   <GifExpertApp/> ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}